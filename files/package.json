{
  "name": "dockerfile-project",
  "description": "Node.js files/configurations that support the creation of Dockerfiles",
  "license": "MIT",
  "author": "Brian Zalewski <brian@megabyte.space> (https://megabyte.space)",
  "version": "0.0.1",
  "scripts": {
    "build": "run-s build:*",
    "build:latest": "docker build --build-arg BUILD_DATE=$(git show -s --format=%cI) --build-arg REVISION=$(git rev-parse HEAD) --build-arg VERSION=${npm_package_version} --tag megabytelabs/dockerfile-project:latest --tag megabytelabs/dockerfile-project:${npm_package_version} .",
    "build:slim": "docker-slim build --tag megabytelabs/dockerfile-project:slim --tag megabytelabs/dockerfile-project:${npm_package_version}-slim --http-probe=false --exec 'dockerfile-project' megabytelabs/dockerfile-project:latest && prettier --write slim.report.json",
    "commit": "git-cz",
    "fix": "run-s fix:*",
    "fix:prettier": "prettier \"{*.json,*.sh,*.yml}\" --write",
    "info": "npm-scripts-info",
    "postinstall": "husky install && run-s update",
    "prepare-release": "run-s test build update test version",
    "publish": "run-s publish:*",
    "publish:login": "docker login",
    "publish:prepare": "npx lint-staged && run-s prepare-release && git push --follow-tags origin master && run-s build",
    "publish:publish": "docker push megabytelabs/dockerfile-project:latest && docker push megabytelabs/dockerfile-project:$npm_package_version && docker push megabytelabs/dockerfile-project:slim && docker push megabytelabs/dockerfile-project:$npm_package_version-slim",
    "publish:readme": "docker pushrm megabytelabs/dockerfile-project",
    "scan": "run-s build scan:*",
    "scan:latest": "docker scan --file Dockerfile megabytelabs/dockerfile-project:latest",
    "scan:login": "docker scan --accept-license --login",
    "scan:slim": "docker scan --file Dockerfile megabytelabs/dockerfile-project:slim",
    "shell": "docker run --cap-drop=ALL -it --rm megabytelabs/dockerfile-project:latest /bin/sh",
    "sizes": "docker images",
    "start": "run-s update",
    "test": "run-s test:*",
    "test:docker": "docker run -v ${PWD}:/work -w /work hadolint/hadolint:latest hadolint Dockerfile",
    "test:preprettier": "prettier --write slim.report.json && prettier --write .blueprint.json",
    "test:prettier": "prettier \"{*.json,*.sh,*.yml}\" --list-different",
    "test:shellcheck": "find . -type d \\( -name .cache -o -name .git -o -name .husky -o -name .modules -o -name node_modules \\) -prune -false -o -name .start.sh -prune -o -type f -name \\*.sh -print0 | xargs -0 -r -n1 shellcheck",
    "update": "bash .start.sh",
    "version": "standard-version --no-verify"
  },
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  },
  "devDependencies": {
    "@megabytelabs/prettier-config": "^1.2.17",
    "consola": "^2.15.3",
    "cspell": "^5.3.3",
    "cz-conventional-changelog": "^3.3.0",
    "husky": "^5.1.1",
    "lint-staged": "^10.5.4",
    "npm-run-all": "^4.1.5",
    "npm-scripts-info": "^0.3.9",
    "prettier": "^2.1.1",
    "prettier-package-json": "^2.1.3",
    "prettier-plugin-sh": "^0.6.0",
    "shellcheck": "^1.0.0",
    "standard-version": "^9.0.0"
  },
  "funding": [
    {
      "type": "opencollective",
      "url": "https://opencollective.com/megabytelabs"
    },
    {
      "type": "patreon",
      "url": "https://www.patreon.com/ProfessorManhattan"
    }
  ],
  "lint-staged": {
    "*.{json,sh,yml}": [
      "prettier --write"
    ],
    "package.json": [
      "prettier-package-json --write"
    ]
  },
  "prettier": "@megabytelabs/prettier-config",
  "scripts-info": {
    "build": "Build the Dockerfile and then build the slim image",
    "build:latest": "Build the Dockerfile the regular way",
    "build:slim": "Build a slim Docker image with Dockerslim",
    "commit": "The preferred way of running git commit (instead of git commit, we prefer running 'npm run commit')",
    "dockerhub": "Update the repository, lint the Dockerfile, build the Dockerfile images, and then, upload both the latest and slim images to Docker Hub.",
    "fix": "Automatically fix formatting errors",
    "info": "Logs descriptions of all the npm tasks",
    "prepare-release": "Updates the CHANGELOG with commits made using 'npm run commit' and updates the project to be ready for release",
    "publish": "Create a new release tag and publish it",
    "scan": "Ensure images are built and then perform a security scan on both the latest and slim builds",
    "shell": "Run the Dockerfile and open its shell",
    "sizes": "List the sizes of the Dockerfile images on the system",
    "test": "Validates the Dockerfile and performs project linting",
    "update": "Runs .update.sh to automatically update meta files and documentation",
    "version": "Used by 'npm run prepare-release' to update the CHANGELOG and app version"
  },
  "standard-version": {
    "scripts": {
      "precommit": "run-s update && git add --all && git commit -m 'chore(readme-version) Updating README.md version.' --no-verify"
    }
  }
}
